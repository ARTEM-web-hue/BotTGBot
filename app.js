const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
require('dotenv').config();

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { webHook: true });
const app = express();
const PORT = process.env.PORT || 3000;

// === Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON ===
app.use(express.json());

// === URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ===
const webhookEndpoint = `/bot${token}`;
const host = process.env.RENDER_EXTERNAL_HOSTNAME || 'localhost';
const url = `https://${host}${webhookEndpoint}`; 

bot.setWebHook(url)
    .then(() => console.log('–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', url))
    .catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç!');

    // –° —à–∞–Ω—Å–æ–º 10% ‚Äî –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (Math.random() < 0.1) {
        bot.sendMessage(chatId, 'üéâ –•–∞—Ö —Å—Ä–∞–±–æ—Ç–∞–ª–æ!');
    }

    // –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ö–Ω–æ–ø–∫–∞ 3', callback_data: 'btn3' }],
                [
                    { text: '–ö–Ω–æ–ø–∫–∞ 1', callback_data: 'btn1' },
                    { text: '–ö–Ω–æ–ø–∫–∞ 2', callback_data: 'btn2' }
                ],
                [
                    { text: '–ö–Ω–æ–ø–∫–∞ 4', callback_data: 'btn4' },
                    { text: '–ö–Ω–æ–ø–∫–∞ 5', callback_data: 'btn5' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', options);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ===
bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    let responseText = '';

    switch (data) {
        case 'btn1':
            responseText = '–ö–Ω–æ–ø–∫–∞ 1 –Ω–∞–∂–∞—Ç–∞!';
            break;
        case 'btn2':
            responseText = '–ö–Ω–æ–ø–∫–∞ 2 –Ω–∞–∂–∞—Ç–∞!';
            break;
        case 'btn3':
            responseText = '–ö–Ω–æ–ø–∫–∞ 3 –Ω–∞–∂–∞—Ç–∞!';
            break;
        case 'btn4':
            responseText = '–ö–Ω–æ–ø–∫–∞ 4 –Ω–∞–∂–∞—Ç–∞!';
            break;
        case 'btn5':
            responseText = '–ö–Ω–æ–ø–∫–∞ 5 –Ω–∞–∂–∞—Ç–∞!';
            break;
        default:
            responseText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!';
    }

    bot.answerCallbackQuery(query.id, { text: responseText });
});

// === –†–æ—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ===
app.post(webhookEndpoint, (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', req.body); // üëà –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (!req.body) return res.sendStatus(400);     // üëà –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π body

    try {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
        res.sendStatus(500);
    }
});

// === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
